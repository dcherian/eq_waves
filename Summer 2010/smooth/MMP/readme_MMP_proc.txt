
          McLane Moored Profiler Data Reduction and Processing Procedures


           John Toole Woods Hole Oceanographic Institution November
          2001, updated February 2002, November 2006
          ------------------------------------------------------------------------


      *_Introduction_*

These pages describe the processing system designed at the Woods Hole
Oceanographic Institution to operate on data from McLane Moored
Profilers.  These Profiler data files are processed (together with
calibration information that characterize the raw sensor data) into
uniformly binned pressure series of ocean temperature, salinity, and
velocity using a series of Matlab scripts.  The software for binary to
ascii data conversion is provided by McLane.  This documentation
pertains to the subsequent software which performs conversions and
calibrations to obtain a pressure gridded profile of the data from the
CTD and ACM, and routines to calibrate and edit the resulting gridded data.*
*

These routines are written for Matlab, and will (hopefully) work under
both linux and Windows operating systems.    The major limitation of the
software package involves file structures.  File names are frequently
generated by the software with expected format of the form
device_directory_name_extension with no blank spaces within any of the
fields.  So a data directory of the form D:\data\experiment_x\rawmat is
acceptable, whereas
C:\My Documents\experiment_x\rawmat would not be. 


*
The Instrument:*

      As currently configured, the McLane Moored Profiler (MMP) acquires
      three types of time-series data during each vertical profile:
          o *Engineering *- time, motor current, battery voltage,
            pressure.  Some instruments also log additional parameters
            here such as flourometer and optical back scatter.
          o *CTD *-* *conductivity, temperature, pressure
          o *ACM *-* *acoustic current meter - four channels of raw
            velocity data, three channels of compass readings and two
            axes of tilt.

*Raw data:*

For each vertical profile, one binary file of each type is written to
the flash memory card. The binary data on the MMP's flash card are
accessed on a PC via the MRL unpacking routine, Unpacker.exe.

Choose the option for producing "machine readable" output; the product
will be a set of three ascii data files (C#######.TXT A#######.TXT,
E#######.TXT, where #######==profile number, padded with leading 0's)
for each profile.

      Introduction <readme_MMP_proc.html#top>


*Quick Look at raw data*

For looking quickly at any of these ascii data files within the Matlab
environment, use the routines MMP_read_eng.m, MMP_read_ctd.m,
MMP_read_ACM.m.  The routines prompt the user to identify the directory
holding the raw ascii data files and the profile numbers to read.  Each
returns the following vectors of measurements according to data type:

        *MMP_read_eng.m* returns the following variables as Matlab vectors:
                esnum: index of the engineering scans
                epres: engineering pressure in decibars
                ecurr: motor current in milli-Amps
                evolt: battery Voltage
                edpdt: profile speed dbars/s from the engineering data
                engtime: time of each engineering scan coded with matlab
function datenum.m

        *MMP_read_ctd.m* returns the following variables as Matlab vectors:
                csnum: index of the CTD scans
                cpres: pressure in decibars
                ctemp: temperature in nominal degrees C
                ccond: conductivity in nominal mmho

        *MMP_read_acm.m*  returns the following variables as Matlab
vectors:
                asnum: index of the ACM scans
                Vab Vcd Vef Vgh: raw path velocities in nominal cm/s
                aHx aHy aHz: horizontal (x,y) and vertical (z)
normalized compass readings
                aTx aTy: tilt in fore-aft and athwartships  degrees


      _Data processing:_

Once the data is unpacked,  three steps are typically completed. More
information on each is provided in the sections below.

    *      Merge the three raw data files and stores all the raw
      variables in one .mat file
    *      Create a summary of the deployment (e.g. min and max
      pressures sampled on each profile, average motor current, etc).
      and examine the results
    *      Average the ACM and CTD data into a user specified grid of
      pressure bins. 
          o Additioinal input required includes laboratory CTD sensor
            and ACM compass calibration information.
    *      Determine and apply Velocity bias corrections.
    *      Calibrate and Quality Control the CTD conductivity data.


      ------------------------------------------------------------------------
      *Merge profile files*

To facilitate processing and archiving the raw MMP data, we merge the
Engineering, CTD and ACM data from each profile into one, Matlab-format
data file (e.g. one file per profile) using *MMP_asc2mat.m*.

Required input includes the directory names for the source data, the
name of the directory where you want the combined output files to go,
and the range of profiles you wish  to process.

The output data files are called */raw####.mat/*.  Each file contains
the following variables:

    *psdate*: profile start date
    *pedate*: profile end date
    *pstart*: profile start time
    *pstop*: profile end time
    *esnum*: index of the engineering scans
    *epres*: engineering pressure in decibars
    *ecurr*: motor current in milli-Amps
    *evolt*: battery Voltage
    *engtime*: time of each engineering scan coded with matlab function
    datenum.m
    *csnum*: index of the CTD scans
    *ccond*: conductivity in nominal mmho
    *ctemp*: temperature in nominal degrees C
    *cpres*: pressure in decibars
    *asnum*: index of the ACM scans
    *Vab*: raw path velocities in nominal cm/s
    *Vcd*: raw path velocities in nominal cm/s
    *Vef*: raw path velocities in nominal cm/s
    *Vgh*: raw path velocities in nominal cm/s
    *aTx*: tilt in fore-aft and athwartships degrees
    *aTy*: tilt in fore-aft and athwartships degrees
    *aHx*: horizontal (x) normalized compass readings
    *aHy*: horizontal (y)  normalized compass readings
    *aHz*: vertical  normalized compass readings
    Merging Data <readme_MMP_proc.html#Mergefiles>

------------------------------------------------------------------------

*Overview of a deployment*

 The Matlab function *MMP_raw_summary.m* gives the user a way to look at
data from an entire deployment and quantify such things as minimum and
maximum pressure sampled on each profile and the profile-averaged speed,
motor current and battery voltage.  The routine works with the combined
matlab-format raw data files created by *MMP_asc2mat* (/raw####.mat/). 
User is asked to input the name of the directory where these data files
are located, and the range of profiles to process.  The user must also
enter a minimum and maximum pressure within which various 
vertically-averaged parameters will be evaluated.

/Hint:/
/        Manually load and plot the pressure data from a subset of the
raw matlab-format data files to quantify pressure ranges.  Picking the
pressure limits for the vertically-averaged parameters somewhat smaller
than the actual depth range sampled by the Profiler will exclude the
start up and ending transients from the averages./

The summary program estimates the following vectors and writes them to a
user-specified summary output file:
           *files*: vector of profile numbers
          * starttime*: profile start time encoded with datenum.m
           *endtime*: profile ending time encoded with datenum.m
           *neng*: number of engineering scans in the profile
           *nctd*: number of CTD scans in each profile
           *nacm*: number of ACM scans in each profile
           *cpmin*: minimum Pressure recorded by the CTD on each profile
           *cpmax*: maximum Pressure recorded by the CTD on each profile
           *epmin*: minimum engineering pressure recorded on each profile
           *epmax*: maximum engineering pressure recorded on each profile
           *espeed*: average travel speed for each profile  dbars/second
           *avevolt*: average battery voltage during each profile
           *avecur*: average motor current during each profile


      ------------------------------------------------------------------------
      *Pressure gridding*

The Matlab routine mmp*_pgrid_main .m *and its associated subroutines
are designed to reduce the profiles of raw temperature, conductivity and
pressure data from the FSI EMCTD and velocity path data and compass
measurements from the FSI acoustic current meter and create
pressure-bin-averaged data in scientific units.  This step in the
processing assumes that the previous step of loading the ascii
engineering, CTD and ACM data files into matlab format (one file per
profile) has been completed.  (These must be called raw####.mat in an
arbitrary, user-specified directory.) Input to the pressure gridding
routine include paths to the input and output data directories, CTD and
ACM sensor calibration files, edit parameters (e.g. expected minimum and
maximum values for each sensor channel), and the user specified pressure
bounds and grid increment on which the data will be averaged.  The user
also specifies the profiles to be processed on each run of the program. 
For ease of use, it is best to establish input parameters within a
separate mfile (see sample_pgrid_input.m) to be run prior to execution
of mmp_pgrid_main.  Gridded output files  (one per profile) are called
*/grd####.mat/*.  In addition, a  documentation file is created (one doc
file per run of  *MMP_pgrid*) called */mmp_pgrid_M_N.doc/* where M is
the first profile processed in the run and N is the last. 

Conceptually, the data from the CTD and ACM are checked to insure that
all variables are with sensible range (specified by  the user) and pass
a first difference check.  Bad raw data are interpolated.  Time is
logged in the engineering file along with a pressure reading.  These
data are used to interpolate a  time estimate for each CTD scan.  Apart
from the logged times when the MMP starts and stops the external
sensors, there are no cross-referenced time marks between the CTD and
ACM apart  from a manufacturer-stated common sample rate.  To align the 
CTD and ACM data streams, the program automatically locates the 
starting and ending transients at the top and bottom of the  profile
interval and assumes constant (but not necessarily the same) sample rate
for each sensor.  This is sufficient to define the time value for each
ACM scan, allowing common binning of all data against pressure.  Once
the alignment is set and the raw data have been edited and calibrated,
the bin-averaging against pressure is carried out and the resultant data
are written out to the user specified directory as */grd####.mat/*. 
Typically these contain a pressure grid of 2 dbars with a span somewhat
greater than the minimum and maximum pressures sampled on a deployment. 
Bins in which there are no data from a given profile are filled with
nans for all variables. 

      */Input:/*
      The input data for this step of the processing are in the
      raw####.mat files. Both the CTD and the ACM require input of some
      edit parameters, specifically the minimum and maximum allowable
      values for each parameter.  Data outside these intervals will be
      assumed to be bad and interpolated over.  You are also required to
      have a matlab format file holding sensor calibration information.

    * */Calibration files/:*

You may create the calibration files manually or use the  scripts
*create_ctd_calfile.m *and *create_acm_calfile.m* to guide you through
the data entry.*
*

          o *CTD:* the calibration file requires the following vectors:

 p_coefs, t_coefs and c_coefs, where each are the coefficients of
polynomials that convert raw sensor values to calibrated values with the
matlab utility polyval:

                        cpres=polyval(p_coefs,cpres);
            ctemp=polyval(t_coefs,cpres); ccond=polyval(c_coefs,cpres);

             In addition, the file must hold the variable "tlag" which
            is the lag in scans that the thermometer lags the
            conductivity.  The CTD data are lag corrected by recursively
            filtering the C and P data to match the response
            characteristics of the T data.

                        [ccond]=MMP_recur_filt(ccon,tlag);
                        [cpres]=MMP_recur_filt(cpres,tlag);

          o *ACM: *the calibration file requires the following variables:

                        Hx_bias, Hx_range, Hy_bias, Hy_range, dirsign,
            compass_bias, Vab_bias, Vcd_bias, Vef_bias, Vgh_bias,
            velocity_scale

            The magnetometer data are scaled to the unit circle as follows:

                       [(aHx-Hx_bias)/Hx_range]^2 +
            [(aHy-Hy_bias)/Hy_range]^2 = 1

            In situ data are used to work out the magnetometer bias and
            range terms that will scale the compass data to the unit
            circle.  These can be estimated simply by overplotting the
            raw aHx versus aHy from a subset of profiles and working out
            the offsets and range adjustments so that the data define a
            circle centered on the origin.  Alternately, McLane Research
            offers a least-square routine to estimate these parameters. 

            The true compass direction towards which the ACM sensor
            sting  points is derived as follows:

                           
            mvpdir=dir_sign*atan2(aHy,aHx)+compass_bias+mag_dev

            where mag_dev is the earth's magnetic deviation.  (Note that
            nonstandard input order to the arctangent function ? it
            turned out that this entry yielded the simplest form of the
            output to analyze).  Here, hx and hy represent the
            magnetometer data after scaling to the unit circle.  The
            term mag_dec is the earth's magnetic declination for the
            deployment site.  Laboratory spin test data are used to
            derive dirsign and compass_bias.

At WHOI, we perform a compass calibration procedure in which the
assembled MMP is held vertically (in normal operating position) and
rotated to fixed points every 45 degrees around the circle (beginning
with local magnetic north) while the raw compass data are logged.  After
adjusting the raw magnetometer data to the unit circle, these data are
analyzed to quantify the scaling of the ACM compass relative to the
?true? magnetic direction.

The ACM calibration file also allows for (separate) adjustment of bias
in each of the four velocity paths and an overall multiplicative scaling
to the velocity data.  For an initial look at the data, biases should be
set to zero and the scaling to 1.0.  More discussion of ACM bias and
scale is given below.


      */Output/*
              Each gridded file /(grd####.mat)/ (one per profile)
      contains the following variables:

                 *startdaytime*: start day and time of the profile
      (encoded with datenum.m)
                 *stopdaytime*: stop day and time of the profile
      (encoded  with datenum.m)
                 *pgrid*: the center values of the pressure grid used in
      the bin-average
                 *ctimave*: day and time of values averaged in each
      pgrid bin (datenum.m)
                 *pave*: average of the pressure values in each pgrid
      bin dbars
                 *tave*: average of the temperature values in each pgrid
      bin degC
                 *s_ave*: salinity computed pave, tave and cave  pss
                 *thetave*: potential temperature computed from pave,
      tave, and s_ave degC
                 *sigthave*: potential density computed from pave, tave
      and s_ave  kg/m^3
                 *cave*: average scaled conductivity in each pgrid bin mmho
                 *uave*: average east velocity in each pgrid bin  cm/s
                 *vave*: average north velocity in each pgrid bin cm/s
                 *wave*: average relative vertical velocity in each
      pgrid bin  cm/s
                 *dpdtave*: average time rate of change of pressure dbars/s
                 *cscan1 cscan2*: indices of the CTD data averaged in
      each pgrid bin
                 *ascan1 ascan2*: indices of the ACM data averaged in
      each  pgrid bin

      Pressure Gridding <readme_MMP_proc.html#Pgrid>


      *Velocity Bias and Scaling
      *

  Bias:

Calibration of the velocity data from the ACM involves corrections for
bias and scale.  Laboratory measurements with the sensing volume in a
bath of still water are used to quantify bias adjustments that are set
in the ACM firmware.  Ideally, these adjustments applied by the ACM
prior to logging result in values of zero from the four velocity paths
when the relative velocity of the ocean is zero.  The arrangement of the
4 velocity paths in the MP configuration are such that if the incident
flow is perfectly aligned with the ACM sting, all four velocity channels
will measure the same speed (0.707 * incident current.  Due to how the
paths are wired, paths ab and ef report positive values with cd and gh
negative for a current directed towards the MP parallel to the ACM
central sting.  Examination of ocean data from the 2-minute rest periods
before and after each vertical traverse frequently finds differences in
the four path speeds.  While real differences could result from mooring
tilt and inexact alignment of the MP body with the flow, a data
processing procedure evolved to try and use these rest-period data to
define bias adjustments.  Lacking a control, these adjustments were
chiefly relative: what offsets can be applied to one or more of the
velocity paths so that all four report similar speeds at the rest
points?  This procedure was never very satisfying, and frequently
different bias adjustments (different by 1-2 cm/s or more) were inferred
for the top and bottom rest points. 

 It has become evident that the raw path velocity data recorded by FSI
ACMs on Moored Profilers can have depth/temperature-dependent biases as
well as require significant scaling adjustment.  The former errors
appear due to a combination of electronic component sensitivities to
temperature and impedance variations of the acoustic transducer ceramics
with pressure or temperature.  In the laboratory, the errors have the
form of sinesoidal variations of the zero-current readings with
temperature with amplitude of several centimeters per second peak to
peak and ?wavelength? of around 5 degrees C.  Each of the velocity paths
appear to behave independently.  While the manufacturer works to
ameliorate these errors in their instrument, the users of MMP need a
procedure for correcting the errors in existing data sets.  I've devised
a procedure to quantify and remove a (time-independent) velocity bias
profile from the raw ACM data that assumes (1) the bias errors are
steady with time and (2) the biases may be defined as a function of
pressure only.  Note that if the ocean's temperature profile is
relatively steady in time, defining bias as a function of pressure or
temperature is equivalent. 

 The basic assumptions of the procedure are that during the course of a
deployment, zero true velocity is sampled at each depth at least once,
that the time-mean ocean vertical velocity is zero, and that the raw
biases are steady in time.  Bias in the two horizontal paths at each
depth is taken as the minimum speed recorded by those paths during the
deployment.  (This assumes that at each depth, at some time during the
deployment, the real ocean current was zero.  For situations where the
amplitude of the velocity fluctuations exceeds that of the mean, this is
a reasonable assumption.)  In practice, the 2.5th percentile of the
speed distribution at each depth is chosen, and the resulting bias
estimates in depth are manually edited and low-pass filtered before
applying to the raw ACM data from each profile.  Bias profiles for the
two vertically-angled paths are derived under the assumption that the
time-mean ocean vertical velocity is zero.  Biases are derived such that
the ensemble-averaged inferred vertical ocean velocity (difference
between relative vertical velocity and vertical velocity of the MP body
deduced from the pressure data) is made zero.  Because wakes affect
these vertically-angled paths, the up-going and down-going ensembles are
treated separately.  The bias correction procedure involves three steps:

mmp_velbias_step1.m

 Input: a user-specified set of raw matlab-format data files and the
corresponding preliminary gridded files (produced with velocity biases
of zero and slope adjustments of 1.0).

 Output: a matlab-format file per input raw profile holding
pressure-bin-averaged raw path velocity data.

 mmp_velbias_step2.m

 Input:  a set of data files produced by the step 1 procedure (it is
recommended that up-going and down-going profiles are analyzed separately).

 Output: a matlab file containing pressure-gridded estimates of velocity
biases of the four ACM paths.  Note that the bias profile for the
vertically-angled path in the wake of the sting (CD path for up-going
profiles, GH for downgoing) is set to zero.  Plots of the ensemble of
path speeds and the derived bias profile are created.

 The profiles created by step 2 should be manually edited to remove any
spikes or nans and filtered to eliminate high-frequency noise as the
user sees fit. 

 mmp_velbias_step3.m

Input:  bias velocity profile files produced by the step 2 procedure and
a set of user-specified raw, matlab-format files

 Output: modified raw matlab-format data files that have had the raw
velocity data ?corrected? for bias error.  These files may then be
re-processed through the gridding routine.  Note: the regridding should
use an ACM calibration file that has zero's for raw path biases (since
the biases have already been corrected at this stage).

Caution: this velbias procedure will fail in cases where there is a
strong mean current and relatively weak variability ? it will in effect
remove some of the mean current, interpreting it as bias error.  It may
be possible in these cases to manually adjust the derived path bias
profiles to preserve the mean. 

 Scaling:

 The path velocity data logged by the ACM may also require a scaling
adjustment.  Formally, a travel time current meter (which the FSI ACM
is, although the basic measurement isn't time of flight) relates the
difference in time sound travels from transducer x to transducer y as
compared from y to x to the ocean current in the direction between x and
y.  Using the simple ?distance equals rate times time? expression:

 t1 = d/(c+u)   t2 = d/(c-u)

 where t1 and t2 are the two travel times (in seconds), d is the
physical distance between the transducers (m), c is the ocean speed of
sound (m/s) and u is the component of relative velocity along the x-y
line segment (m/s).  The time difference (t2-t1) relates to u as

 u = c^2/(2d)*(t2-t1), to first approximation. 

 Rather than time bursts of sound, the FSI ACM transmits pulses of sound
and does a phase difference estimate to infer the path speed.  Their
governing equation takes the form:

 u = Phase * c^2 / (4 pi d f)

 where f is the frequency of the transmitted sound (1 Mhz).  The path
length of the ACM is 13 cm (transducer face to transducer face). 

 There are several issues regarding the scaling between phase (or travel
time) and velocity.  Firstly, flow separation and wake effects around
the individual transducers may make the effective path length (d_eff) of
the ACM different from the physical distance between the units. 
Corrections for this effect would go like: 

 u_corrected = u_reported * d / d_eff

Sound speed is treated by the FSI ACM in instrument firmware.  The
following equation is used to estimate the sound speed (in cm/s):

speed_snd = (1449.0 + 4.6 * sea_tmp - 0.055 * seatmp_sq + 0.0003 *
seatmp_qb +(1.39  - 0.012 * sea_tmp) * (ee_data.sal - 35.0) + 0.017 *
ee_data.dbar) * 100.0;

For Profilers, a constant ocean salinity of 35 pss is assumed, as is a
pressure of 0 dbars.  Ocean temperature is inferred from a
low-resolution thermistor mounted to the ACM pressure case end cap. 
Unfortunately, that temperature is not currently logged by the
instrument, so we can't work out exactly what sound speed was used
inside the ACM.  If we assume that the ACM worked with an accurate
estimate of the ocean's temperature, it is possible to develop a
correction for the real pressure as:

 u_corrected = u * [c(S,T,P) / c(35,T,0)]^2.    

However, I would expect that the temperature sampled by the ACM lags
that of the local water (as sensed by the CTD) because the ACM is
currently positioned inside the MP cowling and the thermistor is mounted
in a large pressure case (with large thermal mass).    Perhaps this
could be modeled as a single pole filter applied to the CTD observations. 

 In future, the FSI ACM will report path speeds using a constant 1500
m/s sound speed.  The user will then be required to correct these speeds
for the in situ ocean sound speed, derived from the CTD data.  The
correction equation will then become simply:

 u_corrected = u * c(S,T,P)^2/1500^2             with S,T and P from the
CTD.

 A third possible source of scale adjustment comes from the instrument
electronics.  I don't have a good understanding about what might cause
these, or how variable they are between instruments. 

 Tow-tank or flume tests may be done to quantify the velocity scaling of
the ACM data.  Early tests in the WHOI tow-tank facility with the FSI
ACM's suggested scale factors of around 10% (carriage speed exceeding
speed reported by the ACM in the fresh water tank).  Variations of a few
percent on top of this are expected due to sound speed variations. 

 Scale information may also be inferred from comparisons between
Profiler data and observations from fixed-depth current meters mounted
on the mooring.  Scale factors upwards of 1.3 have been inferred in some
instruments recently. 

Velocity Bias <readme_MMP_proc.html#velocity>

 


      *CTD Conductivity
      *


      *Calibration:
      *

 Like a standard shipboard CTD instrument, conductivity data from the
MMP CTD must be calibrated and edited (for example to remove spikes and
larger depth segments when the cell is fouled by biological
contamination).  In the absence of reference conductivity data, a
procedure has been developed to derive a profile-dependent conductivity
adjustment that forces the salinity at a specified potential temperature
to be stable in time.  The approach works with gridded data files and
the so-called potential conductivity (conductivity inverted from
salinity, potential temperature and zero pressure ? a quantity that,
like potential temperature, should be independent of adiabatic vertical
heaving of the water column). 

 Start with a gridded MMP data set based on your best guess of the CTD
sensor calibrations.

 Use program timeseries_theta_lsq_pc.m to estimate potential
conductivity on a specified isotherm for each profile.  (Pick an
isotherm for which you think the theta/s is stable over the course of
the deployment.)  This program outputs a matlab file holding the
variables: time stas p u v theta_target s c pc tmin tmax pmin pmax
order.  Going forward, you'll need the stas and pc vectors.

 Using calibrated ship ctd data, determine the "true" potential
conductivity at that isotherm.  You can do this manually as follows:

Load in the ctd p,t,s data from a selected CTD station
Derive potential temperature:                theta=sw_ptmp(s,t,p,0); 
Derive potential conductivity profile:  potc=sw_cndr(s,theta,0)*sw_c3515;
Lastly interpolate to find potc at your selected theta surface.  Call
that value true_potc.

     

Using the above two data sets, derive a conductivity ratio factor for
each MMP profile as:

 ratio=true_potc./pc (where pc came from the timeseries_theta_lsq_pc.m
program).

Edit the ratio time series to remove spikes and making sure there are no
nans. 
Create a matlab data file with the variables prof_num and ratio where
prof_num == stas (above).

 Then using program mmp_cond_adj.m, derive a new set of MMP profiles
with adjusted salinities to force the theta/salinity to be stable on the
specified isotherm.  This routine reads in each gridded profile, derives
the potc, applies the ratio factor and rederives salinity.  The result
is written back out in a series of grd files in a user-specified
directory (could be the same directory as the input, but not recommended).

 Alternate procedures may prove useful if there are independent
information that may be used to quantify time-varying conductivity
calibrations, such as data from fixed-depth C-T sensors mounted on the
mooring.

Conductivity <readme_MMP_proc.html#Cond>


      *Editing:*

Various editing routines for the pressure-gridded data have been
developed to interpolate across salinity spikes or depth intervals where
the conductivity sensor was fouled. Quality control editing of CTD data
is the final step in the processing and should occur after all
calibrations have been finalized;  it is a station by station labor
intensive task which would need to be repeated if revised calibrations
were applied to the data during pressure gridding. 

Routine find_grd_sa_spikes_all.m can be used to quickly plot grdfmt
files in a directory to pinpoint problem profiles.   Small spikes within
a profile may be removed with the routine mmp_edit_c_small.m, while a
spike appearing at the bottom end of a profile may be removed with
mmp_fix_s_end.m.  Large segments with fouled conductivity data may be
edited using mmp_edit_c_big1.m or mmp_edit_c_big2.m. These routines use
the potential temperature-conductivity relationship(s) from one or two
user-specified reference profiles (with good conductivity data) to
estimate the conductivity on a profile with fouled data.  This approach
yields reasonable looking interpolated data when the
temperature-conductivity relationship is monotonic, but not when
intrusions are present.  Treatment of segments with intrusions can be
better handled using routine MMP_edit_ssig_big2.m where interpolations
are done on density surfaces rather than according to  potential
temperature.  Finally, routine MMP_add_sa_bias.m is used for adding or
subtracting a salinity bias to data over a particular pressure range of
fouled data.

QC Edits <readme_MMP_proc.html#QC>


      *Finalized MMP Data*

Typical finalized MMP data:

   1. has been 2db pressure gridded
         1. with a first difference quality edit on the data
         2. with pre-deployment laboratory pressure calibrations applied
         3. with pre-deployment laboratory temperature calibrations applied
         4. with compass corrections applied such that aHx vs aHy
            defines a circle
         5. with Vab Vcd Vef Vgh velocity biases applied
   2. has had salinity data calibrated in comparison to  associated
      time/position  calibrated CTD profiles
   3. has had salinity and velocity data quality control editted


